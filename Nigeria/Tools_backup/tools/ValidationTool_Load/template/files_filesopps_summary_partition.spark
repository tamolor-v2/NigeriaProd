import org.apache.spark.sql._
val hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)

hiveContext.sql("set hive.enforce.bucketing=true")
hiveContext.sql("set hive.exec.dynamic.partition.mode=nonstrict")

val buffer = scala.collection.mutable.ArrayBuffer(
" insert overwrite table databasename.files_filesopps_summary_partition_yousef partition (feed_name,file_dt) 					" ,
" select distinct name,lines,feed_name,file_dt from                                                            " ,
"  (select name,lines,trim(case when path like \"%VOICE_MA%\"  then  \"CCN_VOICE_MA\"                          " ,
"  when path like \"%VOICE_DA%\"  then  \"CCN_VOICE_DA\"                                            " ,
"  when path like \"%VOICE_AC%\"  then  \"CCN_VOICE_AC\"                                            " ,
"  when path like \"%SMS_MA%\"  then  \"CCN_SMS_MA  \"                                              " ,
"  when path like \"%SMS_DA%\"  then  \"CCN_SMS_DA\"                                                " ,
"  when path like \"%SMS_AC%\"  then  \"CCN_SMS_AC\"                                                " ,
"  when path like \"%GPRS_MA%\"  then  \"CCN_GPRS_MA\"                                              " ,
"  when path like \"%GPRS_DA%\"  then  \"CCN_GPRS_DA\"                                              " ,
"  when path like \"%GPRS_AC%\"  then  \"CCN_GPRS_AC\"                                              " ,
"  when path like \"%SDP_ACC_ADJ_MA%\"  then  \"SDP_ACC_ADJ_MA\"                                    " ,
"  when path like \"%SDP_ACC_ADJ_DA%\"  then  \"SDP_ACC_ADJ_DA\"                                    " ,
"  when path like \"%SDP_ACC_ADJ_AC%\"  then  \"SDP_ACC_ADJ_AC\"                                    " ,
"  when path like \"%FIN_LOG%\"  then  \"FIN_LOG\"                                                  " ,
"  when path like \"%ADJ_MA%\"  then  \"AIR_ADJ_MA\"                                                " ,
"  when path like \"%ADJ_DA%\"  then  \"AIR_ADJ_DA\"                                                " ,
"  when path like \"%REFILL_MA%\"  then  \"AIR_REFILL_MA\"                                          " ,
"  when path like \"%REFILL_DA%\"  then  \"AIR_REFILL_DA\"                                          " ,
"  when path like \"%REFILL_AC%\"  then  \"AIR_REFILL_AC\"                                          " ,
"  when path like \"%GGSN%\"  then  \"GGSN_CDR\"                                                    " ,
"  when path like \"%MSC_CDR%\"  then  \"MSC_CDR\"                                                  " ,
"  when path like \"%PM_RATED%\"  then  \"PM_RATED\"                                                " ,
"  when path like \"%CB_SERV_MAST_VIEW%\"  then  \"CB_SERV_MASTER_VIEW\"                                  " ,
"  when path like \"%BUNDLE4U_VOICE%\"  then  \"BUNDLE4U_VOICE\"                                  " ,
"  when path like \"%BUNDLE4U_GPRS%\"  then  \"BUNDLE4U_GPRS\"                                  " ,
"  when path like \"%RECON%\"  then  \"RECON\"                                  " ,
"  when path like \"%SGSN_CDR%\"  then  \"SGSN_CDR\"                                  " ,
"  when path like \"%MAPS_INV_2G%\"  then  \"MAPS2G\"                                  " ,
"  when path like \"%MAPS_INV_3G%\"  then  \"MAPS3G\"                                  " ,
"  when path like \"%MAPS_INV_4G%\"  then  \"MAPS4G\"                                  " ,
"  when path like \"%DMC_DUMP_ALL%\"  then  \"DMC_DUMP_ALL\"                                  " ,
"  when path like \"%/HSDP/%\"  then  \"HSDP_CDR\"                                  " ,
"  when path like \"%MOBILE_MONEY%\"  then  \"MOBILE_MONEY\"                                  " ,
"  when path like \"%CUG_ACCESS%\"  then  \"CUG_ACCESS_FEES\"                                  " ,
"  when path like \"%SDP_DMP_MA%\"  then  \"SDP_DMP_MA\"                                  " ,
"  when path like \"%SDP_DMP_DA%\"  then  \"SDP_DMP_DA\"                                  " ,
" else \"UK\" end) feed_name,case when  upper(path) like \"%PART%\" then 1907 else nvl(split(substring(substring(path,INSTR(path,'ArchiveKeyWork')+3),1),\"\\/\")[1],1970) end file_dt " ,
" from databasename.files_filesopps_summary_yousef ) FilesOps             ") 






val sql=buffer.mkString(" ")
println(sql)
hiveContext.sql(sql)
exit;
