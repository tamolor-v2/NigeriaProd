ZookeeperHostList="datanode01026.mtn.com:2181,datanode01028.mtn.com:2181,master01001.mtn.com:2181,master01002.mtn.com:2181,master01003.mtn.com:2181"
kafkaHostList="datanode01001.mtn.com:6667,datanode01002.mtn.com:6667,datanode01003.mtn.com:6667,datanode01004.mtn.com:6667,datanode01005.mtn.com:6667,datanode01006.mtn.com:6667,datanode01007.mtn.com:6667,datanode01008.mtn.com:6667,datanode01009.mtn.com:6667,datanode01010.mtn.com:6667,datanode01011.mtn.com:6667,datanode01012.mtn.com:6667,datanode01013.mtn.com:6667,datanode01014.mtn.com:6667,datanode01015.mtn.com:6667,datanode01016.mtn.com:6667,datanode01017.mtn.com:6667,datanode01018.mtn.com:6667,datanode01019.mtn.com:6667,datanode01020.mtn.com:6667,datanode01021.mtn.com:6667,datanode01022.mtn.com:6667,datanode01023.mtn.com:6667,datanode01024.mtn.com:6667,datanode01025.mtn.com:6667,datanode01026.mtn.com:6667,datanode01027.mtn.com:6667,datanode01028.mtn.com:6667,datanode01029.mtn.com:6667,datanode01030.mtn.com:6667,datanode01031.mtn.com:6667,datanode01032.mtn.com:6667,datanode01033.mtn.com:6667,datanode01034.mtn.com:6667,datanode01035.mtn.com:6667,datanode01036.mtn.com:6667,datanode01037.mtn.com:6667,datanode01038.mtn.com:6667,datanode01039.mtn.com:6667,datanode01040.mtn.com:6667,datanode01041.mtn.com:6667,datanode01042.mtn.com:6667"
TopicName=CentralMetaStore
prevtDate=$(date -d '-2 day' '+%Y%m%d')
currentDate=$(date -d '-1 day' '+%Y%m%d')
hostName=$(hostname)
bash /mnt/beegfs/tools/JsonBuilder/JsonBuilder.scala --id 1 --status 0 --hostname "$hostName" --step 1 --brokers $kafkaHostList --topic $TopicName
###### push to kafka here 
echo "hdfs dfs -rm /FlareData/output_8/NEWREG_BIOUPDT_POOL/tbl_dt\=$currentDate/*"
hdfs dfs -rm /FlareData/output_8/NEWREG_BIOUPDT_POOL/tbl_dt\=$currentDate/*
##================================= this query for msisdn_key !=0 =================================
/opt/presto/bin/presto --server master01004:8099 --catalog hive5 --schema flare_8 --execute "insert into flare_8.newreg_bioupdt_pool select '${currentDate}' date_key, case when daily_table.daily_flag = '1' then daily_table.source else weekly_table.source end source, case when daily_table.daily_flag = '1' then daily_table.report_gen_date else weekly_table.report_gen_date end report_gen_date, case when daily_table.daily_flag = '1' then daily_table.mobl_num_voice_v else weekly_table.mobl_num_voice_v end mobl_num_voice_v, case when daily_table.daily_flag = '1' then daily_table.status_code_v else weekly_table.status_code_v end status_code_v, case when daily_table.daily_flag = '1' then daily_table.subs_title_v else weekly_table.subs_title_v end subs_title_v, case when daily_table.daily_flag = '1' then daily_table.first_name else weekly_table.first_name end first_name, case when daily_table.daily_flag = '1' then daily_table.last_name else weekly_table.last_name end last_name, case when daily_table.daily_flag = '1' then daily_table.middle_name else weekly_table.middle_name end middle_name, case when daily_table.daily_flag = '1' then daily_table.gender else weekly_table.gender end gender, case when daily_table.daily_flag = '1' then daily_table.state_of_origin else weekly_table.state_of_origin end state_of_origin, case when daily_table.daily_flag = '1' then daily_table.lga_of_origin else weekly_table.lga_of_origin end lga_of_origin, case when daily_table.daily_flag = '1' then daily_table.mother_maiden_name else weekly_table.mother_maiden_name end mother_maiden_name, case when daily_table.daily_flag = '1' then daily_table.transaction_id else weekly_table.transaction_id end transaction_id, case when daily_table.daily_flag = '1' then daily_table.uploaded_date else weekly_table.uploaded_date end uploaded_date, case when daily_table.daily_flag = '1' then daily_table.vendor_channel else weekly_table.vendor_channel end vendor_channel, case when daily_table.daily_flag = '1' then daily_table.sim_reg_device_id else weekly_table.sim_reg_device_id end sim_reg_device_id, case when daily_table.daily_flag = '1' then daily_table.device_user_id else weekly_table.device_user_id end device_user_id, case when daily_table.daily_flag = '1' then daily_table.reg_state else weekly_table.reg_state end reg_state, case when daily_table.daily_flag = '1' then daily_table.reg_lga else weekly_table.reg_lga end reg_lga, case when daily_table.daily_flag = '1' then daily_table.religion else weekly_table.religion end religion, case when daily_table.daily_flag = '1' then daily_table.registration_state else weekly_table.registration_state end registration_state, case when daily_table.daily_flag = '1' then daily_table.registration_lga else weekly_table.registration_lga end registration_lga, case when daily_table.daily_flag = '1' then daily_table.birthdate else weekly_table.birthdate end birthdate, case when daily_table.daily_flag = '1' then daily_table.address else weekly_table.address end address, case when daily_table.daily_flag = '1' then daily_table.city else weekly_table.city end city, case when daily_table.daily_flag = '1' then daily_table.city_desc else weekly_table.city_desc end city_desc, case when daily_table.daily_flag = '1' then daily_table.district else weekly_table.district end district, case when daily_table.daily_flag = '1' then daily_table.district_desc else weekly_table.district_desc end district_desc, case when daily_table.daily_flag = '1' then daily_table.country else weekly_table.country end country, case when daily_table.daily_flag = '1' then daily_table.country_desc else weekly_table.country_desc end country_desc, case when daily_table.daily_flag = '1' then daily_table.occupation else weekly_table.occupation end occupation, case when daily_table.daily_flag = '1' then daily_table.alternate_number else weekly_table.alternate_number end alternate_number, case when daily_table.daily_flag = '1' then daily_table.eye_balling_status else weekly_table.eye_balling_status end eye_balling_status, case when daily_table.daily_flag = '1' then daily_table.dob else weekly_table.dob end dob, case when daily_table.daily_flag = '1' then daily_table.file_name else weekly_table.file_name end file_name, case when daily_table.daily_flag = '1' then daily_table.file_offset else weekly_table.file_offset end file_offset, case when daily_table.daily_flag = '1' then daily_table.kamanja_loaded_date else weekly_table.kamanja_loaded_date end kamanja_loaded_date, case when daily_table.daily_flag = '1' then daily_table.file_mod_date else weekly_table.file_mod_date end file_mod_date, case when daily_table.daily_flag = '1' then daily_table.msisdn_key else weekly_table.msisdn_key end msisdn_key, case when daily_table.daily_flag = '1' then daily_table.event_timestamp_enrich else weekly_table.event_timestamp_enrich end event_timestamp_enrich, case when daily_table.daily_flag = '1' then daily_table.original_timestamp_enrich else weekly_table.original_timestamp_enrich end original_timestamp_enrich, case when daily_table.daily_flag = '1' then daily_table.date_from_source else weekly_table.date_from_source end date_from_source, ${currentDate} as tbl_dt from (select * from flare_8.newreg_bioupdt_pool where tbl_dt=${prevtDate} and msisdn_key != 0) as weekly_table left outer join ( select row_number() over (partition by msisdn_v order by updated_dt desc) rnk,cast(a.date_key as varchar) date_key ,'D' as source ,cast(0 as bigint) as report_gen_date ,a.msisdn_v as mobl_num_voice_v ,a.status_v as status_code_v ,cast('' as varchar) as subs_title_v ,a.first_name_v as first_name ,a.last_name_v as last_name ,a.middle_name ,a.gender_v as gender ,element_at(statecode.statecode_map,a.state_of_origin_v) as state_of_origin ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as lga_of_origin ,a.mother_maiden_v as mother_maiden_name ,a.transaction_id ,date_format(date_parse(a.updated_dt,'%Y-%m-%d %T.%f'),'%Y%m%d') as uploaded_date ,a.vendor_code_v as vendor_channel ,a.sim_reg_device as sim_reg_device_id ,a.device_used_by as device_user_id ,element_at(statecode.statecode_map,a.reg_state) as reg_state ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.reg_lga) as reg_lga ,a.religion_v as religion ,element_at(statecode.statecode_map,a.state_of_origin_v) as registration_state ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as registration_lga ,a.date_of_birth as birthdate ,a.residential_address as address ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.registration_city) as city ,element_at(lganame.lganame_map,a.reg_state || '-' || a.registration_city) as city_desc ,element_at(statecode.statecode_map,a.reg_state) as district ,element_at(statename.statename_map,a.reg_state) as district_desc ,element_at(countrycode.countrycode_map,try_cast(a.nationality_v as bigint)) as country ,element_at(countryname.countryname_map,try_cast(a.nationality_v as bigint)) as country_desc ,cast('' as varchar) as occupation ,cast('' as varchar) as alternate_number ,a.eye_balling_status as eye_balling_status ,a.tbl_dt as tbl_dt ,a.msisdn_key as msisdn_key , '1' daily_flag ,a.dob ,a.file_name ,a.file_offset ,a.kamanja_loaded_date ,a.file_mod_date ,a.date_key  ,a.event_timestamp_enrich ,a.original_timestamp_enrich ,a.tbl_dt date_from_source from flare_8.NEWREG_BIOUPDT_POOL_DAILY a, (select map_agg(crm_country_cd,agl_country_cd) as countrycode_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countrycode, (select map_agg(crm_country_cd,country) as countryname_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countryname, (select map_agg(crm_state_cd,agl_state_cd) as statecode_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statecode, (select map_agg(crm_state_cd,description) as statename_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statename, (select map_agg(crm_state_cd || '-' || crm_lga_id,agl_lga_cd) as lgacode_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lgacode, (select map_agg(crm_state_cd || '-' || crm_lga_id,description) as lganame_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lganame where a.tbl_dt = ${currentDate} and a.status_v in ('E','C','PS') and a.msisdn_key != 0 ) daily_table on weekly_table.msisdn_key = daily_table.msisdn_key and daily_table.rnk=1" --output-format CSV

echo "sleep 1m"
sleep 1m
##================================= this query for msisdn_key !=0  and not in weekly_table =================================
/opt/presto/bin/presto --server master01004:8099 --catalog hive5 --schema flare_8 --execute "insert into flare_8.newreg_bioupdt_pool select date_key , source , report_gen_date , mobl_num_voice_v , status_code_v , subs_title_v , first_name , last_name , middle_name , gender , state_of_origin , lga_of_origin , mother_maiden_name , transaction_id , uploaded_date , vendor_channel , sim_reg_device_id , device_user_id , reg_state , reg_lga , religion , registration_state , registration_lga , birthdate , address , city , city_desc , district , district_desc , country , country_desc , occupation , alternate_number , eye_balling_status , dob , file_name , file_offset , kamanja_loaded_date , file_mod_date, msisdn_key , event_timestamp_enrich, original_timestamp_enrich, date_from_source, tbl_dt from (select row_number() over (partition by msisdn_v order by updated_dt desc) rnk,'${currentDate}' date_key ,'D' as source ,cast(0 as bigint) as report_gen_date ,a.msisdn_v as mobl_num_voice_v ,a.status_v as status_code_v ,cast('' as varchar) as subs_title_v ,a.first_name_v as first_name ,a.last_name_v as last_name ,a.middle_name ,a.gender_v as gender ,element_at(statecode.statecode_map,a.state_of_origin_v) as state_of_origin ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as lga_of_origin ,a.mother_maiden_v as mother_maiden_name ,a.transaction_id ,date_format(date_parse(a.updated_dt,'%Y-%m-%d %T.%f'),'%Y%m%d') as uploaded_date ,a.vendor_code_v as vendor_channel ,a.sim_reg_device as sim_reg_device_id ,a.device_used_by as device_user_id ,element_at(statecode.statecode_map,a.reg_state) as reg_state ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.reg_lga) as reg_lga ,a.religion_v as religion ,element_at(statecode.statecode_map,a.state_of_origin_v) as registration_state ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as registration_lga ,a.date_of_birth as birthdate ,a.residential_address as address ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.registration_city) as city ,element_at(lganame.lganame_map,a.reg_state || '-' || a.registration_city) as city_desc ,element_at(statecode.statecode_map,a.reg_state) as district ,element_at(statename.statename_map,a.reg_state) as district_desc ,element_at(countrycode.countrycode_map,try_cast(a.nationality_v as bigint)) as country ,element_at(countryname.countryname_map,try_cast(a.nationality_v as bigint)) as country_desc ,cast('' as varchar) as occupation ,cast('' as varchar) as alternate_number ,a.eye_balling_status as eye_balling_status ,a.dob ,a.file_name ,a.file_offset ,a.kamanja_loaded_date ,a.file_mod_date, a.msisdn_key as msisdn_key ,a.event_timestamp_enrich ,a.original_timestamp_enrich ,a.tbl_dt date_from_source,a.tbl_dt as tbl_dt from flare_8.NEWREG_BIOUPDT_POOL_DAILY a, (select map_agg(crm_country_cd,agl_country_cd) as countrycode_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countrycode, (select map_agg(crm_country_cd,country) as countryname_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countryname, (select map_agg(crm_state_cd,agl_state_cd) as statecode_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statecode, (select map_agg(crm_state_cd,description) as statename_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statename, (select map_agg(crm_state_cd || '-' || crm_lga_id,agl_lga_cd) as lgacode_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lgacode, (select map_agg(crm_state_cd || '-' || crm_lga_id,description) as lganame_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lganame where a.tbl_dt = ${currentDate} and a.status_v in ('E','C','PS') and a.msisdn_key != 0 and a.msisdn_key not in (select msisdn_key from flare_8.newreg_bioupdt_pool where tbl_dt = ${prevtDate}) )where rnk=1" --output-format CSV
 
echo "sleep 1m"
sleep 1m
##================================= this query for msisdn_key =0 =================================
/opt/presto/bin/presto --server master01004:8099 --catalog hive5 --schema flare_8 --execute "insert into flare_8.newreg_bioupdt_pool select '${currentDate}' date_key, case when daily_table.daily_flag = '1' then daily_table.source else weekly_table.source end source, case when daily_table.daily_flag = '1' then daily_table.report_gen_date else weekly_table.report_gen_date end report_gen_date, case when daily_table.daily_flag = '1' then daily_table.mobl_num_voice_v else weekly_table.mobl_num_voice_v end mobl_num_voice_v, case when daily_table.daily_flag = '1' then daily_table.status_code_v else weekly_table.status_code_v end status_code_v, case when daily_table.daily_flag = '1' then daily_table.subs_title_v else weekly_table.subs_title_v end subs_title_v, case when daily_table.daily_flag = '1' then daily_table.first_name else weekly_table.first_name end first_name, case when daily_table.daily_flag = '1' then daily_table.last_name else weekly_table.last_name end last_name, case when daily_table.daily_flag = '1' then daily_table.middle_name else weekly_table.middle_name end middle_name, case when daily_table.daily_flag = '1' then daily_table.gender else weekly_table.gender end gender, case when daily_table.daily_flag = '1' then daily_table.state_of_origin else weekly_table.state_of_origin end state_of_origin, case when daily_table.daily_flag = '1' then daily_table.lga_of_origin else weekly_table.lga_of_origin end lga_of_origin, case when daily_table.daily_flag = '1' then daily_table.mother_maiden_name else weekly_table.mother_maiden_name end mother_maiden_name, case when daily_table.daily_flag = '1' then daily_table.transaction_id else weekly_table.transaction_id end transaction_id, case when daily_table.daily_flag = '1' then daily_table.uploaded_date else weekly_table.uploaded_date end uploaded_date, case when daily_table.daily_flag = '1' then daily_table.vendor_channel else weekly_table.vendor_channel end vendor_channel, case when daily_table.daily_flag = '1' then daily_table.sim_reg_device_id else weekly_table.sim_reg_device_id end sim_reg_device_id, case when daily_table.daily_flag = '1' then daily_table.device_user_id else weekly_table.device_user_id end device_user_id, case when daily_table.daily_flag = '1' then daily_table.reg_state else weekly_table.reg_state end reg_state, case when daily_table.daily_flag = '1' then daily_table.reg_lga else weekly_table.reg_lga end reg_lga, case when daily_table.daily_flag = '1' then daily_table.religion else weekly_table.religion end religion, case when daily_table.daily_flag = '1' then daily_table.registration_state else weekly_table.registration_state end registration_state, case when daily_table.daily_flag = '1' then daily_table.registration_lga else weekly_table.registration_lga end registration_lga, case when daily_table.daily_flag = '1' then daily_table.birthdate else weekly_table.birthdate end birthdate, case when daily_table.daily_flag = '1' then daily_table.address else weekly_table.address end address, case when daily_table.daily_flag = '1' then daily_table.city else weekly_table.city end city, case when daily_table.daily_flag = '1' then daily_table.city_desc else weekly_table.city_desc end city_desc, case when daily_table.daily_flag = '1' then daily_table.district else weekly_table.district end district, case when daily_table.daily_flag = '1' then daily_table.district_desc else weekly_table.district_desc end district_desc, case when daily_table.daily_flag = '1' then daily_table.country else weekly_table.country end country, case when daily_table.daily_flag = '1' then daily_table.country_desc else weekly_table.country_desc end country_desc, case when daily_table.daily_flag = '1' then daily_table.occupation else weekly_table.occupation end occupation, case when daily_table.daily_flag = '1' then daily_table.alternate_number else weekly_table.alternate_number end alternate_number, case when daily_table.daily_flag = '1' then daily_table.eye_balling_status else weekly_table.eye_balling_status end eye_balling_status, case when daily_table.daily_flag = '1' then daily_table.dob else weekly_table.dob end dob, case when daily_table.daily_flag = '1' then daily_table.file_name else weekly_table.file_name end file_name, case when daily_table.daily_flag = '1' then daily_table.file_offset else weekly_table.file_offset end file_offset, case when daily_table.daily_flag = '1' then daily_table.kamanja_loaded_date else weekly_table.kamanja_loaded_date end kamanja_loaded_date, case when daily_table.daily_flag = '1' then daily_table.file_mod_date else weekly_table.file_mod_date end file_mod_date, case when daily_table.daily_flag = '1' then daily_table.msisdn_key else weekly_table.msisdn_key end msisdn_key, case when daily_table.daily_flag = '1' then daily_table.event_timestamp_enrich else weekly_table.event_timestamp_enrich end event_timestamp_enrich, case when daily_table.daily_flag = '1' then daily_table.original_timestamp_enrich else weekly_table.original_timestamp_enrich end original_timestamp_enrich, case when daily_table.daily_flag = '1' then daily_table.date_from_source else weekly_table.date_from_source end date_from_source, ${currentDate} as tbl_dt from (select * from flare_8.newreg_bioupdt_pool where tbl_dt=${prevtDate} and msisdn_key = 0) as weekly_table left outer join ( select row_number() over (partition by msisdn_v order by updated_dt desc) rnk,cast(a.date_key as varchar) date_key ,'D' as source ,cast(0 as bigint) as report_gen_date ,a.msisdn_v as mobl_num_voice_v ,a.status_v as status_code_v ,cast('' as varchar) as subs_title_v ,a.first_name_v as first_name ,a.last_name_v as last_name ,a.middle_name ,a.gender_v as gender ,element_at(statecode.statecode_map,a.state_of_origin_v) as state_of_origin ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as lga_of_origin ,a.mother_maiden_v as mother_maiden_name ,a.transaction_id ,date_format(date_parse(a.updated_dt,'%Y-%m-%d %T.%f'),'%Y%m%d') as uploaded_date ,a.vendor_code_v as vendor_channel ,a.sim_reg_device as sim_reg_device_id ,a.device_used_by as device_user_id ,element_at(statecode.statecode_map,a.reg_state) as reg_state ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.reg_lga) as reg_lga ,a.religion_v as religion ,element_at(statecode.statecode_map,a.state_of_origin_v) as registration_state ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as registration_lga ,a.date_of_birth as birthdate ,a.residential_address as address ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.registration_city) as city ,element_at(lganame.lganame_map,a.reg_state || '-' || a.registration_city) as city_desc ,element_at(statecode.statecode_map,a.reg_state) as district ,element_at(statename.statename_map,a.reg_state) as district_desc ,element_at(countrycode.countrycode_map,try_cast(a.nationality_v as bigint)) as country ,element_at(countryname.countryname_map,try_cast(a.nationality_v as bigint)) as country_desc ,cast('' as varchar) as occupation ,cast('' as varchar) as alternate_number ,a.eye_balling_status as eye_balling_status ,a.tbl_dt as tbl_dt ,a.msisdn_key as msisdn_key , '1' daily_flag ,a.dob ,a.file_name ,a.file_offset ,a.kamanja_loaded_date ,a.file_mod_date ,a.date_key  ,a.event_timestamp_enrich ,a.original_timestamp_enrich ,a.tbl_dt date_from_source from flare_8.NEWREG_BIOUPDT_POOL_DAILY a, (select map_agg(crm_country_cd,agl_country_cd) as countrycode_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countrycode, (select map_agg(crm_country_cd,country) as countryname_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countryname, (select map_agg(crm_state_cd,agl_state_cd) as statecode_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statecode, (select map_agg(crm_state_cd,description) as statename_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statename, (select map_agg(crm_state_cd || '-' || crm_lga_id,agl_lga_cd) as lgacode_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lgacode, (select map_agg(crm_state_cd || '-' || crm_lga_id,description) as lganame_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lganame where a.tbl_dt = ${currentDate} and a.status_v in ('E','C','PS') and a.msisdn_key = 0 ) daily_table on weekly_table.mobl_num_voice_v = daily_table.mobl_num_voice_v and daily_table.rnk = 1" --output-format CSV
echo "sleep 1m"
sleep 1m
##================================= this query for msisdn_key =0 =================================
 /opt/presto/bin/presto --server master01004:8099 --catalog hive5 --schema flare_8 --execute "insert into flare_8.newreg_bioupdt_pool select date_key , source , report_gen_date , mobl_num_voice_v , status_code_v , subs_title_v , first_name , last_name , middle_name , gender , state_of_origin , lga_of_origin , mother_maiden_name , transaction_id , uploaded_date , vendor_channel , sim_reg_device_id , device_user_id , reg_state , reg_lga , religion , registration_state , registration_lga , birthdate , address , city , city_desc , district , district_desc , country , country_desc , occupation , alternate_number , eye_balling_status , dob , file_name , file_offset , kamanja_loaded_date , file_mod_date, msisdn_key , event_timestamp_enrich, original_timestamp_enrich, date_from_source, tbl_dt from (select row_number() over (partition by msisdn_v order by updated_dt desc) rnk, '${currentDate}' date_key ,'D' as source ,cast(0 as bigint) as report_gen_date ,a.msisdn_v as mobl_num_voice_v ,a.status_v as status_code_v ,cast('' as varchar) as subs_title_v ,a.first_name_v as first_name ,a.last_name_v as last_name ,a.middle_name ,a.gender_v as gender ,element_at(statecode.statecode_map,a.state_of_origin_v) as state_of_origin ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as lga_of_origin ,a.mother_maiden_v as mother_maiden_name ,a.transaction_id ,date_format(date_parse(a.updated_dt,'%Y-%m-%d %T.%f'),'%Y%m%d') as uploaded_date ,a.vendor_code_v as vendor_channel ,a.sim_reg_device as sim_reg_device_id ,a.device_used_by as device_user_id ,element_at(statecode.statecode_map,a.reg_state) as reg_state ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.reg_lga) as reg_lga ,a.religion_v as religion ,element_at(statecode.statecode_map,a.state_of_origin_v) as registration_state ,element_at(lgacode.lgacode_map,a.state_of_origin_v || '-' || a.lga_of_origin_v) as registration_lga ,a.date_of_birth as birthdate ,a.residential_address as address ,element_at(lgacode.lgacode_map,a.reg_state || '-' || a.registration_city) as city ,element_at(lganame.lganame_map,a.reg_state || '-' || a.registration_city) as city_desc ,element_at(statecode.statecode_map,a.reg_state) as district ,element_at(statename.statename_map,a.reg_state) as district_desc ,element_at(countrycode.countrycode_map,try_cast(a.nationality_v as bigint)) as country ,element_at(countryname.countryname_map,try_cast(a.nationality_v as bigint)) as country_desc ,cast('' as varchar) as occupation ,cast('' as varchar) as alternate_number ,a.eye_balling_status as eye_balling_status ,a.dob ,a.file_name ,a.file_offset ,a.kamanja_loaded_date ,a.file_mod_date, a.msisdn_key as msisdn_key ,a.event_timestamp_enrich ,a.original_timestamp_enrich ,a.tbl_dt date_from_source,a.tbl_dt as tbl_dt from flare_8.NEWREG_BIOUPDT_POOL_DAILY a, (select map_agg(crm_country_cd,agl_country_cd) as countrycode_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countrycode, (select map_agg(crm_country_cd,country) as countryname_map from flare_8.agl_crm_country_map where tbl_dt=${currentDate}) countryname, (select map_agg(crm_state_cd,agl_state_cd) as statecode_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statecode, (select map_agg(crm_state_cd,description) as statename_map from flare_8.agl_crm_state_map where tbl_dt=${currentDate}) statename, (select map_agg(crm_state_cd || '-' || crm_lga_id,agl_lga_cd) as lgacode_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lgacode, (select map_agg(crm_state_cd || '-' || crm_lga_id,description) as lganame_map from flare_8.agl_crm_lga_map where tbl_dt=${currentDate}) lganame where a.tbl_dt = ${currentDate} and a.status_v in ('E','C','PS') and a.msisdn_key = 0 and a.msisdn_v not in (select mobl_num_voice_v from flare_8.newreg_bioupdt_pool where tbl_dt = ${prevtDate})) where rnk = 1" --output-format CSV

echo "sleep 1m"
sleep 1m

bash /mnt/beegfs/tools/JsonBuilder/JsonBuilder.scala --id 1 --status 1 --hostname "$hostName" --step 1 --brokers $kafkaHostList --topic $TopicName
###### push to kafka here
